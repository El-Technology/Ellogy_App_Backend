name: Build and push microservices
on:
  push:
    branches:
      - develop

jobs:
  deploy:
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ vars.REMOTE_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      ENVNAME: ${{ vars.ENVNAME }} 

    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Login to GitHub Packages
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Build, tag, and push docker image of UserManager to Github Packages
        id: build-UserManager-image
        env:
          IMAGE_TAG: ${{github.run_number}}
          IMAGE_NAME: UserManager
          PROJECT_PATH: ./UserManager/
          CONTEXT: .
          FILEPATH: ./UserManager.Api/Dockerfile               
        run: | 
          cd ${PROJECT_PATH}
          docker build -t docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:${ENVNAME}-${IMAGE_TAG} -f ${FILEPATH} ${CONTEXT}
          docker push docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:${ENVNAME}-${IMAGE_TAG}
          echo "::set-output name=image::docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:${ENVNAME}-${IMAGE_TAG}"

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/github-actions-key
          chmod 600 ~/.ssh/github-actions-key
          cat >>~/.ssh/config <<END
          Host ec2
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/github-actions-key
            StrictHostKeyChecking no
          END

      - name: Deploy to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SERVICE1_IMAGE: ${{ steps.build-UserManager-image.outputs.image }}
    
          ConnectionString_UserManager: ${{secrets.CONNECTIONSTRING_USERMANAGER}}
          Environment: ${{ vars.ENVNAME }} 
        run: |
          ssh ec2 bash -s <<EOF
          sudo su
          
          docker rm -f $(docker ps -a -q)
          apt install awscli -y
          sudo snap install yq

          cd EducationPlatformBackend

          export SERVICE1_NAME=$SERVICE1_NAME
          export SERVICE1_IMAGE=$SERVICE1_IMAGE

          yq e -i ".services.$SERVICE1_NAME.image=env(SERVICE1_IMAGE)" docker-compose.yml
          
          export ConnectionString_UserManager="$ConnectionString_UserManager"
          export Environment=$Environment

          docker-compose up -d
          EOF
