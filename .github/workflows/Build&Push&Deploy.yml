name: Build and push microservices
on:
  push:
    branches:
      - develop

jobs:
  deploy:
    env:
      SSH_HOST: ${{ vars.SSH_HOST }}
      SSH_USER: ${{ vars.REMOTE_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      ENVNAME: ${{ vars.ENVNAME }} 

    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image of UserManager to Amazon ECR
        id: build-UserManager-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: education_platform/user_manger
          IMAGE_TAG: ${{github.run_number}}
          PROJECT_PATH: ./UserManager/EducationPlatform.UserManager
          CONTEXT: .
          FILEPATH: ./EducationPlatform.UserManager.Api/Dockerfile               
        run: | 
          cd ${PROJECT_PATH}
          docker build -t ${REGISTRY}/${REPOSITORY}:${ENVNAME}-${IMAGE_TAG} -f ${FILEPATH} ${CONTEXT}
          docker push ${REGISTRY}/${REPOSITORY}:${ENVNAME}-${IMAGE_TAG}
          echo "::set-output name=image::$REGISTRY/$REPOSITORY:$ENVNAME-$IMAGE_TAG"
          
      - name: Build, tag, and push docker image of RankingStatisticManager to Amazon ECR
        id: build-RankingStatisticManager-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: education_platform/ranking_and_statistics
          IMAGE_TAG: ${{github.run_number}}
          PROJECT_PATH: ./RankingsAndStatisticsManager/EducationPlatform.RSManager
          CONTEXT: .
          FILEPATH: EducationPlatform.RS.Api/Dockerfile  
        run: | 
          cd ${PROJECT_PATH}
          docker build -t ${REGISTRY}/${REPOSITORY}:${ENVNAME}-${IMAGE_TAG} -f ${FILEPATH} ${CONTEXT}
          docker push ${REGISTRY}/${REPOSITORY}:${ENVNAME}-${IMAGE_TAG}
          echo "::set-output name=image::$REGISTRY/$REPOSITORY:$ENVNAME-$IMAGE_TAG"

      - name: Build, tag, and push docker image of GameManager to Amazon ECR
        id: build-GameManager-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: education_platform/game_manager
          IMAGE_TAG: ${{github.run_number}}
          PROJECT_PATH: ./GameManager/EducationPlatform.GameManager
          CONTEXT: .
          FILEPATH: EducationPlatform.GameManager.Api/Dockerfile  
        run: | 
            cd ${PROJECT_PATH}
            docker build -t ${REGISTRY}/${REPOSITORY}:${ENVNAME}-${IMAGE_TAG} -f ${FILEPATH} ${CONTEXT}
            docker push ${REGISTRY}/${REPOSITORY}:${ENVNAME}-${IMAGE_TAG}
            echo "::set-output name=image::$REGISTRY/$REPOSITORY:$ENVNAME-$IMAGE_TAG"

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/github-actions-key
          chmod 600 ~/.ssh/github-actions-key
          cat >>~/.ssh/config <<END
          Host ec2
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/github-actions-key
            StrictHostKeyChecking no
          END

      - name: Deploy to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SERVICE1_IMAGE: ${{ steps.build-UserManager-image.outputs.image }}
          SERVICE2_IMAGE: ${{ steps.build-RankingStatisticManager-image.outputs.image }}
          SERVICE3_IMAGE: ${{ steps.build-GameManager-image.outputs.image }}
          SERVICE1_NAME: fiveplatform_userManager
          SERVICE2_NAME: fiveplatform_rankingAndStatistic
          SERVICE3_NAME: fiveplatform_gameManager
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_ACCESS_SECRET: ${{ secrets.AWS_ACCESS_SECRET }}
          AWS_REGION: eu-central-1
          ConnectionString_UserManager: ${{secrets.CONNECTIONSTRING_USERMANAGER}}
          ConnectionString_RSManager: ${{secrets.CONNECTIONSTRING_RSMANAGER}}
          ConnectionString_GameManager: ${{secrets.CONNECTIONSTRING_GAMEMANAGER}}
          Environment: ${{ vars.ENVNAME }} 
        run: |
          ssh ec2 bash -s <<EOF
          sudo su
          
          docker rm -f $(docker ps -a -q)
          apt install awscli -y
          sudo snap install yq
          aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${REGISTRY}

          cd EducationPlatformBackend

          export SERVICE1_NAME=$SERVICE1_NAME
          export SERVICE2_NAME=$SERVICE2_NAME
          export SERVICE3_NAME=$SERVICE3_NAME
          export SERVICE1_IMAGE=$SERVICE1_IMAGE
          export SERVICE2_IMAGE=$SERVICE2_IMAGE
          export SERVICE3_IMAGE=$SERVICE3_IMAGE

          yq e -i ".services.$SERVICE1_NAME.image=env(SERVICE1_IMAGE)" docker-compose.yml
          yq e -i ".services.$SERVICE2_NAME.image=env(SERVICE2_IMAGE)" docker-compose.yml
          yq e -i ".services.$SERVICE3_NAME.image=env(SERVICE3_IMAGE)" docker-compose.yml

          export ConnectionString_UserManager="$ConnectionString_UserManager"
          export ConnectionString_RSManager="$ConnectionString_RSManager"
          export ConnectionString_GameManager="$ConnectionString_GameManager"
          export AWS_ACCESS_KEY=$AWS_ACCESS_KEY
          export AWS_ACCESS_SECRET=$AWS_ACCESS_SECRET
          export Environment=$Environment

          docker-compose up -d
          EOF
