name: Build and push user manager
on:
  push:
    branches:
      - develop
    paths:
      - UserManager/**
      - .github/**

jobs:
  deploy:
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ vars.REMOTE_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      ENVNAME: ${{ vars.ENVNAME }} 
      MICROSERVICE_NAME: 'user_manager'

    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      
      - name: Build and push image
        id: build-push-image
        uses: "./.github/templates/PushImage"
        with: 
          MicroServiceName: ${{ env.MICROSERVICE_NAME }}
          Environment: ${{ env.ENVNAME }}
          MicrserviceProjectPath: ./UserManager
          DockerfilePath: ./UserManager.Api/Dockerfile
          GithubToken: ${{ secrets.GITHUB_TOKEN }}

      # - name: Pull and run image
      #   uses: "./.github/templates/PullAndRunImage"
      #   with: 
      #     SshHost: ${{ env.SSH_HOST }}
      #     SshUser: ${{ env.SSH_USER }}
      #     SshKey: ${{ env.SSH_KEY }}
      #     ServiceName: ${{ env.MICROSERVICE_NAME }}
      #     ServiceImage: ${{ steps.build-push-image.outputs.ServiceImage }}
      #     JwtSecretKey:  ${{ secrets.JWT_SECRET_KEY }}
      #     ConnectionString: ${{secrets.CONNECTIONSTRING}}
      #     GithubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh/
          echo "${{ env.SSH_KEY }}" > ~/.ssh/github-actions-key
          chmod 600 ~/.ssh/github-actions-key
          cat >>~/.ssh/config <<END
          Host VM
            HostName ${{ env.SSH_HOST }}
            User ${{ env.SSH_USER }}
            IdentityFile ~/.ssh/github-actions-key
            StrictHostKeyChecking no
          END

      - name: Deploy to VM
        env:
          SERVICE_NAME: ${{ env.MICROSERVICE_NAME }}
          SERVICE_IMAGE: ${{ steps.build-push-image.outputs.ServiceImage }}
      
          ConnectionString: ${{ secrets.CONNECTIONSTRING }}
          JwtSecretKey : ${{ secrets.JWT_SECRET_KEY }}
          MailgunDomain : ${{ secrets.MAILGUN_DOMAIN }}
          MailgunApiKey : ${{ secrets.MAILGUN_APIKEY }}
        run: |
          ssh VM bash -s <<EOF
          sudo su
            
          docker rm -f $(docker ps -a -q)
          sudo snap install yq

          docker login docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

          cd Ellogy

          export SERVICE_NAME=$SERVICE_NAME
          export SERVICE_IMAGE=$SERVICE_IMAGE
          export ConnectionString="$ConnectionString"
          export JwtSecretKey="$JwtSecretKey"
          export MailgunDomain="$MailgunDomain"
          export MailgunApiKey="$MailgunApiKey"

          yq e -i ".services.$SERVICE_NAME.image=env(SERVICE_IMAGE)" docker-compose.yaml
            
          docker-compose up -d
          EOF