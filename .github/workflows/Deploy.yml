name: Build and push microservices
on:
  push:
    branches:
      - 'Ellogy_prod'
    paths:
      - TicketsManager/**
      - UserManager/**
      - AICommunicationService/**
      - PaymentManager/**
      - .github/workflows/Deploy.yml
      - .github/actions/** 
      - '!UserManager/NotificationService/**'
      
env:
  SSH_HOST: ${{ secrets.SSH_HOST_prod }}
  SSH_USER: ${{ vars.REMOTE_USER }}
  SSH_KEY: ${{ secrets.SSH_KEY_prod }}
  ENVNAME: ${{ vars.ENVNAME }}

jobs:
  changes:
    runs-on: ubuntu-latest

    outputs:
      AICommunicationService: ${{ steps.changes.outputs.AICommunicationService }}
      UserManager: ${{ steps.changes.outputs.UserManager }}
      TicketsManager: ${{ steps.changes.outputs.TicketsManager }}
      PaymentManager: ${{ steps.changes.outputs.PaymentManager }}
      Workflow: ${{ steps.changes.outputs.Workflow }}
      
    steps:
      - name: Get Code
        uses: actions/checkout@v4
     
      - name: Check changes  
        uses: dorny/paths-filter@v3
        id: changes
        with:
           base: ${{ github.ref }}
           filters: |
              AICommunicationService:
                - 'AICommunicationService/**'
              UserManager:
                - 'UserManager/**'
              TicketsManager:
                - 'TicketsManager/**'
              PaymentManager:
                - 'PaymentManager/**'
              Workflow:
                - '.github/**'
  
  build_payment_manager:
    permissions: write-all

    env:
      MICROSERVICE_NAME: 'payment_manager'
      PROJECT_PATH: './PaymentManager/'
      CONTEXT: '.'
      DOCKERFILEPATH: './PaymentManager.API/Dockerfile'

    outputs:
      MicroserviceName: ${{ steps.build-n-push.outputs.MicroserviceName }}
      MicroserviceImage: ${{ steps.build-n-push.outputs.MicroserviceImage }}

    needs: changes
    if: ${{ ( needs.changes.outputs.PaymentManager == 'true' || needs.changes.outputs.Workflow == 'true' ) && true }}

    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Run Tests
        run: |
            dotnet test PaymentManager.Tests/PaymentManager.Tests.csproj --logger 'console;verbosity=normal'
            if [ $? -ne 0 ]; then
                echo 'Tests failed, deployment canceled.'
                exit 1
            else
                echo 'Tests passed, continuing with deployment.'
            fi
        working-directory: ${{ env.PROJECT_PATH }}
      
      - name: Build and push image of PaymentManager
        id: build-n-push
        uses: ./.github/actions/Build-n-push
        with: 
          MicroserviceName: ${{ env.MICROSERVICE_NAME }}
          Environment: ${{ env.ENVNAME }}
          ProjectPath: ${{ env.PROJECT_PATH }}
          Context: ${{ env.CONTEXT }}
          DockerfilePath: ${{ env.DOCKERFILEPATH }}
          Token: ${{ secrets.GITHUB_TOKEN }}

  build_ai_communication_service:
    permissions: write-all

    env:
      MICROSERVICE_NAME: 'ai_communication_service'
      PROJECT_PATH: './AICommunicationService/'
      CONTEXT: '.'
      DOCKERFILEPATH: './AICommunicationService.Api/Dockerfile'
    
    outputs:
      MicroserviceName: ${{ steps.build-n-push.outputs.MicroserviceName }}
      MicroserviceImage: ${{ steps.build-n-push.outputs.MicroserviceImage }}
      
    needs: changes
    if: ${{ needs.changes.outputs.AICommunicationService == 'true' || needs.changes.outputs.Workflow == 'true' }}
    
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Run Tests
        run: |
            dotnet test AiCommunicationService.Tests/AiCommunicationService.Tests.csproj --logger 'console;verbosity=normal'
            if [ $? -ne 0 ]; then
                echo 'Tests failed, deployment canceled.'
                exit 1
            else
                echo 'Tests passed, continuing with deployment.'
            fi
        working-directory: ${{ env.PROJECT_PATH }}
      
      - name: Build and push image of AICommunicationService
        id: build-n-push
        uses: ./.github/actions/Build-n-push
        with: 
          MicroserviceName: ${{ env.MICROSERVICE_NAME }}
          Environment: ${{ env.ENVNAME }}
          ProjectPath: ${{ env.PROJECT_PATH }}
          Context: ${{ env.CONTEXT }}
          DockerfilePath: ${{ env.DOCKERFILEPATH }}
          Token: ${{ secrets.GITHUB_TOKEN }}

  build_user_manager:
    permissions: write-all

    env:
      MICROSERVICE_NAME: 'user_manager'
      PROJECT_PATH: './UserManager/'
      CONTEXT: '.'
      DOCKERFILEPATH: './UserManager.Api/Dockerfile'
    
    outputs:
      MicroserviceName: ${{ steps.build-n-push.outputs.MicroserviceName }}
      MicroserviceImage: ${{ steps.build-n-push.outputs.MicroserviceImage }}
      
    needs: changes
    if: ${{ needs.changes.outputs.UserManager == 'true' || needs.changes.outputs.Workflow == 'true' }}
    
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v4
      
      - name: Build and push image of User Manager
        id: build-n-push
        uses: ./.github/actions/Build-n-push
        with: 
          MicroserviceName: ${{ env.MICROSERVICE_NAME }}
          Environment: ${{ env.ENVNAME }}
          ProjectPath: ${{ env.PROJECT_PATH }}
          Context: ${{ env.CONTEXT }}
          DockerfilePath: ${{ env.DOCKERFILEPATH }}
          Token: ${{ secrets.GITHUB_TOKEN }}

  build_ticket_manager:
    permissions: write-all

    env:
      MICROSERVICE_NAME: 'ticket_manager'
      PROJECT_PATH: './TicketsManager/'
      CONTEXT: '.'
      DOCKERFILEPATH: './TicketsManager.Api/Dockerfile'
  
    outputs:
      MicroserviceName: ${{ steps.build-n-push.outputs.MicroserviceName }}
      MicroserviceImage: ${{ steps.build-n-push.outputs.MicroserviceImage }}
      
    needs: changes
    if: ${{ needs.changes.outputs.TicketsManager == 'true' || needs.changes.outputs.Workflow == 'true' }}   
    
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Run Tests
        run: |
            dotnet test TicketsManager.Tests/TicketsManager.Tests.csproj --logger 'console;verbosity=normal'
            if [ $? -ne 0 ]; then
                echo 'Tests failed, deployment canceled.'
                exit 1
            else
                echo 'Tests passed, continuing with deployment.'
            fi
        working-directory: ${{ env.PROJECT_PATH }}

      - name: Build and push image of User Manager
        id: build-n-push
        uses: ./.github/actions/Build-n-push
        with: 
          MicroserviceName: ${{ env.MICROSERVICE_NAME }}
          Environment: ${{ env.ENVNAME }}
          ProjectPath: ${{ env.PROJECT_PATH }}
          Context: ${{ env.CONTEXT }}
          DockerfilePath: ${{ env.DOCKERFILEPATH }}
          Token: ${{ secrets.GITHUB_TOKEN }}

  deploy_microservices:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [build_user_manager, build_ticket_manager, build_ai_communication_service, build_payment_manager]

    runs-on: ubuntu-latest
    steps:
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_KEY" > ~/.ssh/github-actions-key
        chmod 600 ~/.ssh/github-actions-key
        cat >>~/.ssh/config <<END
        Host VM
          HostName $SSH_HOST
          User $SSH_USER
          IdentityFile ~/.ssh/github-actions-key
          StrictHostKeyChecking no
        END

    - name: Deploy to VM
      env:
        SERVICE_NAME1: ${{ needs.build_ai_communication_service.outputs.MicroserviceName }}
        SERVICE_IMAGE1: ${{ needs.build_ai_communication_service.outputs.MicroserviceImage }}

        SERVICE_NAME2: ${{ needs.build_user_manager.outputs.MicroserviceName }}
        SERVICE_IMAGE2: ${{ needs.build_user_manager.outputs.MicroserviceImage }}
        
        SERVICE_NAME3: ${{ needs.build_ticket_manager.outputs.MicroserviceName }}
        SERVICE_IMAGE3: ${{ needs.build_ticket_manager.outputs.MicroserviceImage }}

        SERVICE_NAME4: ${{ needs.build_payment_manager.outputs.MicroserviceName }}
        SERVICE_IMAGE4: ${{ needs.build_payment_manager.outputs.MicroserviceImage }}
        
      run: |
        ssh VM bash -s <<EOF
        sudo su
          
        sudo snap install yq

        docker login docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

        cd Ellogy
        docker-compose down

        export SERVICE_NAME1=$SERVICE_NAME1
        export SERVICE_IMAGE1=$SERVICE_IMAGE1
        export SERVICE_NAME2=$SERVICE_NAME2
        export SERVICE_IMAGE2=$SERVICE_IMAGE2
        export SERVICE_NAME3=$SERVICE_NAME3
        export SERVICE_IMAGE3=$SERVICE_IMAGE3
        export SERVICE_NAME4=$SERVICE_NAME4
        export SERVICE_IMAGE4=$SERVICE_IMAGE4

        yq e -i '.services.$SERVICE_NAME1.image=env(SERVICE_IMAGE1)' docker-compose.yaml
        yq e -i '.services.$SERVICE_NAME2.image=env(SERVICE_IMAGE2)' docker-compose.yaml
        yq e -i '.services.$SERVICE_NAME3.image=env(SERVICE_IMAGE3)' docker-compose.yaml
        yq e -i '.services.$SERVICE_NAME4.image=env(SERVICE_IMAGE4)' docker-compose.yaml

        if [ "true" == "true" ]
          then 
            docker-compose --profile payments up -d
          else
            docker-compose up -d
        fi

        EOF