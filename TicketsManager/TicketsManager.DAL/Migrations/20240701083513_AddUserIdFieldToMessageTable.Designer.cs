// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicketsManager.DAL.Context;

#nullable disable

namespace TicketsManager.DAL.Migrations
{
    [DbContext(typeof(TicketsManagerDbContext))]
    [Migration("20240701083513_AddUserIdFieldToMessageTable")]
    partial class AddUserIdFieldToMessageTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TicketSummaryUsecase", b =>
                {
                    b.Property<Guid>("TicketSummariesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsecasesId")
                        .HasColumnType("uuid");

                    b.HasKey("TicketSummariesId", "UsecasesId");

                    b.HasIndex("UsecasesId");

                    b.ToTable("TicketSummaryUsecase");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketModels.ActionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActionHistoryEnum")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.Property<int>("TicketCurrentStepEnum")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("ActionHistories", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketModels.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ActionState")
                        .HasColumnType("integer");

                    b.Property<int?>("ActionType")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Stage")
                        .HasColumnType("integer");

                    b.Property<int?>("SubStage")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketModels.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Email")
                        .HasColumnType("boolean");

                    b.Property<bool>("Push")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sms")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketModels.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BannersJson")
                        .HasColumnType("text");

                    b.Property<string>("BusinessImpact")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Context")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentStep")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketModels.TicketShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GivenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Permission")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SharedUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("SubStageEnum")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketCurrentStep")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketShares", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketSummaryModels.SummaryAcceptanceCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TicketSummaryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketSummaryId");

                    b.ToTable("SummaryAcceptanceCriteria", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketSummaryModels.SummaryScenario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TicketSummaryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketSummaryId");

                    b.ToTable("SummaryScenario", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketSummaryModels.TicketSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPotential")
                        .HasColumnType("boolean");

                    b.Property<int?>("SubStage")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketSummaries", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UsecaseModels.TicketDiagram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PictureLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsecaseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsecaseId");

                    b.ToTable("TicketDiagrams", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UsecaseModels.TicketTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsecaseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsecaseId");

                    b.ToTable("TicketTables", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UsecaseModels.Usecase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Usecases", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UserStoryTestsModels.TestCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreConditions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestCaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestSteps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserStoryTestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserStoryTestId");

                    b.ToTable("TestCase", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UserStoryTestsModels.TestPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RiskManagement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestEnvironment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserStoryTestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserStoryTestId")
                        .IsUnique();

                    b.ToTable("TestPlan", (string)null);
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UserStoryTestsModels.UserStoryTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("TestScenarios")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UsecaseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsecaseId")
                        .IsUnique();

                    b.ToTable("UserStoryTest", (string)null);
                });

            modelBuilder.Entity("TicketSummaryUsecase", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.TicketSummaryModels.TicketSummary", null)
                        .WithMany()
                        .HasForeignKey("TicketSummariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketsManager.DAL.Models.UsecaseModels.Usecase", null)
                        .WithMany()
                        .HasForeignKey("UsecasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketModels.ActionHistory", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.TicketModels.Ticket", "Ticket")
                        .WithMany("ActionHistories")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketModels.Message", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.TicketModels.Ticket", "Ticket")
                        .WithMany("TicketMessages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketModels.Notification", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.TicketModels.Ticket", "Ticket")
                        .WithMany("Notifications")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketModels.TicketShare", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.TicketModels.Ticket", "Ticket")
                        .WithMany("TicketShares")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketSummaryModels.SummaryAcceptanceCriteria", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.TicketSummaryModels.TicketSummary", "TicketSummary")
                        .WithMany("SummaryAcceptanceCriteria")
                        .HasForeignKey("TicketSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketSummary");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketSummaryModels.SummaryScenario", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.TicketSummaryModels.TicketSummary", "TicketSummary")
                        .WithMany("SummaryScenarios")
                        .HasForeignKey("TicketSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketSummary");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketSummaryModels.TicketSummary", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.TicketModels.Ticket", "Ticket")
                        .WithMany("TicketSummaries")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UsecaseModels.TicketDiagram", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.UsecaseModels.Usecase", "Usecase")
                        .WithMany("Diagrams")
                        .HasForeignKey("UsecaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usecase");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UsecaseModels.TicketTable", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.UsecaseModels.Usecase", "Usecase")
                        .WithMany("Tables")
                        .HasForeignKey("UsecaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usecase");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UsecaseModels.Usecase", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.TicketModels.Ticket", "Ticket")
                        .WithMany("Usecases")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UserStoryTestsModels.TestCase", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.UserStoryTestsModels.UserStoryTest", "UserStoryTest")
                        .WithMany("TestCases")
                        .HasForeignKey("UserStoryTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStoryTest");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UserStoryTestsModels.TestPlan", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.UserStoryTestsModels.UserStoryTest", "UserStoryTest")
                        .WithOne("TestPlan")
                        .HasForeignKey("TicketsManager.DAL.Models.UserStoryTestsModels.TestPlan", "UserStoryTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStoryTest");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UserStoryTestsModels.UserStoryTest", b =>
                {
                    b.HasOne("TicketsManager.DAL.Models.UsecaseModels.Usecase", "Usecase")
                        .WithOne("UserStoryTest")
                        .HasForeignKey("TicketsManager.DAL.Models.UserStoryTestsModels.UserStoryTest", "UsecaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Usecase");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketModels.Ticket", b =>
                {
                    b.Navigation("ActionHistories");

                    b.Navigation("Notifications");

                    b.Navigation("TicketMessages");

                    b.Navigation("TicketShares");

                    b.Navigation("TicketSummaries");

                    b.Navigation("Usecases");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.TicketSummaryModels.TicketSummary", b =>
                {
                    b.Navigation("SummaryAcceptanceCriteria");

                    b.Navigation("SummaryScenarios");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UsecaseModels.Usecase", b =>
                {
                    b.Navigation("Diagrams");

                    b.Navigation("Tables");

                    b.Navigation("UserStoryTest");
                });

            modelBuilder.Entity("TicketsManager.DAL.Models.UserStoryTestsModels.UserStoryTest", b =>
                {
                    b.Navigation("TestCases");

                    b.Navigation("TestPlan");
                });
#pragma warning restore 612, 618
        }
    }
}
