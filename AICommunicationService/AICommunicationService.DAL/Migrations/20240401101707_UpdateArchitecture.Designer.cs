// <auto-generated />
using System;
using AICommunicationService.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace AICommunicationService.DAL.Migrations
{
    [DbContext(typeof(AICommunicationContext))]
    [Migration("20240401101707_UpdateArchitecture")]
    partial class UpdateArchitecture
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AICommunicationService.DAL.Models.AIPrompt", b =>
                {
                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Functions")
                        .HasColumnType("text");

                    b.Property<string>("Input")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TemplateName");

                    b.ToTable("AIPrompts", (string)null);
                });

            modelBuilder.Entity("AICommunicationService.DAL.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsReadyToUse")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("AICommunicationService.DAL.Models.DocumentSharing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentSharing", (string)null);
                });

            modelBuilder.Entity("AICommunicationService.DAL.Models.Embedding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Vector>("Vector")
                        .HasColumnType("vector(1536)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Embeddings", (string)null);
                });

            modelBuilder.Entity("AICommunicationService.DAL.Models.DocumentSharing", b =>
                {
                    b.HasOne("AICommunicationService.DAL.Models.Document", "Document")
                        .WithMany("DocumentSharing")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("AICommunicationService.DAL.Models.Embedding", b =>
                {
                    b.HasOne("AICommunicationService.DAL.Models.Document", "Document")
                        .WithMany("Embeddings")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("AICommunicationService.DAL.Models.Document", b =>
                {
                    b.Navigation("DocumentSharing");

                    b.Navigation("Embeddings");
                });
#pragma warning restore 612, 618
        }
    }
}
