using AICommunicationService.Common.Models.AIRequest;
using AICommunicationService.Common.Models.AIResponse;

namespace AICommunicationService.BLL.Interfaces
{
    /// <summary>
    /// This interface defines methods for communication with Chat GPT using different templates.
    /// </summary>
    public interface ICommunicationService
    {
        /// <summary>
        /// This method sends a conversation request to ChatGPT, which contains a series of messages between a user and the model. It generates and returns a response string representing the model's reply to the conversation.
        /// </summary>
        /// <param name="conversationRequest">A model containing the conversation request, which includes a series of messages between the user and the model.</param>
        /// <returns>A string representing the model's reply to the conversation.</returns>
        Task<string> GetConversationAsync(ConversationRequest conversationRequest);

        /// <summary>
        /// This method sends a request containing user stories to ChatGPT, which generates and returns a response using a description template.
        /// </summary>
        /// <param name="userStories">A string value containing the user stories to be used as input for the model.</param>
        /// <returns>A model representing the response generated by ChatGPT using the description template.</returns>
        Task<DescriptionResponse> GetDescriptionAsync(string userStories);

        /// <summary>
        /// This method sends a request containing user stories to ChatGPT, which generates and returns a response with diagrams or graphical representations related to the input stories.
        /// </summary>
        /// <param name="userStories">A string value containing the user stories to be used as input for the model.</param>
        /// <returns>A model representing the response generated by ChatGPT containing diagrams or graphical representations.</returns>
        Task<DiagramResponse> GetDiagramsAsync(string userStories);

        /// <summary>
        /// This method checks whether the request history is clear or not. It returns a boolean value indicating the clarity of the request history.
        /// </summary>
        /// <param name="history">A string containing the request history to be checked for clarity.</param>
        /// <returns>A boolean value (true or false) indicating whether the request history is clear or not.</returns>
        Task<bool> GetIsRequestClearAsync(string history);

        /// <summary>
        /// This method sends a description as input to ChatGPT, which generates and returns a list of potential summary responses based on the provided description.
        /// </summary>
        /// <param name="description">A string containing the description for which potential summaries need to be generated.</param>
        /// <returns>A list of potential summary responses generated by ChatGPT.</returns>
        Task<List<PotentialSummaryResponse>> GetPotentialSummaryAsync(string description);

        /// <summary>
        /// This method sends a request history to ChatGPT, which generates and returns a list of summary responses based on the provided history.
        /// </summary>
        /// <param name="history">A string containing the request history for which summaries need to be generated.</param>
        /// <returns>A list of summary responses generated by ChatGPT.</returns>
        Task<List<SummaryResponse>> GetSummaryAsync(string history);

        /// <summary>
        /// This method sends a message to ChatGPT and receives a response in the form of a string.
        /// </summary>
        /// <param name="message">The message to be sent to ChatGPT.</param>
        /// <returns>The response received from ChatGPT as a string.</returns>
        Task<string> SendMessageAsync(string message);
    }
}
