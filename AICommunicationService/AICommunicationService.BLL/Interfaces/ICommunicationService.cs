using AICommunicationService.Common.Models.AIRequest;
using AICommunicationService.Common.Models.AIResponse;

namespace AICommunicationService.BLL.Interfaces
{
    /// <summary>
    /// This interface defines methods for communication with Chat GPT using different templates.
    /// </summary>
    public interface ICommunicationService
    {
        /// <summary>
        /// Endpoint for retrieving AI response.
        /// </summary>
        /// <param name="createConversationRequest">Request params</param>
        /// <returns>Returns string data</returns>
        Task<string> ChatRequestAsync(CreateConversationRequest createConversationRequest);

        /// <summary>
        /// Retrieves banners asynchronously based on the provided description.
        /// </summary>
        /// <param name="description">The description associated with the banners.</param>
        /// <returns>A task representing the asynchronous operation. The banners information as a string.</returns>
        Task<string> GetBannersAsync(string description);

        /// <summary>
        /// This method sends a conversation request to ChatGPT, which contains a series of messages between a user and the model. It generates and returns a response string representing the model's reply to the conversation.
        /// </summary>
        /// <param name="conversationRequest">A model containing the conversation request, which includes a series of messages between the user and the model.</param>
        /// <returns>A string representing the model's reply to the conversation.</returns>
        Task<string> GetConversationAsync(ConversationRequest conversationRequest);

        /// <summary>
        /// This method sends a conversation summary request to Chat GPT, containing a series of messages between a user and the model. It retrieves the model's summary response based on the conversation provided in the <see cref="ConversationSummaryRequest"/> model.
        /// </summary>
        /// <param name="conversationSummaryRequest">A model containing the conversation summary request, which includes a series of messages between the user and the model.</param>
        /// <returns>A string representing the model's summary response based on the conversation.</returns>
        Task<string> GetConversationSummaryAsync(ConversationSummaryRequest conversationSummaryRequest);

        /// <summary>
        /// This method sends a request containing user stories to ChatGPT, which generates and returns a response using a description template.
        /// </summary>
        /// <param name="userStories">A string value containing the user stories to be used as input for the model.</param>
        /// <returns>A model representing the response generated by ChatGPT using the description template.</returns>
        Task<DescriptionResponse> GetDescriptionAsync(string userStories);

        ///<summary>
        /// Asynchronously retrieves a description table based on the provided description table request.
        ///</summary>
        ///<param name="descriptionTableRequest">A model containing the description table request.</param>
        ///<returns>A string representing the retrieved description table.</returns>
        Task<string> GetDescriptionTableAsync(DescriptionTableRequest descriptionTableRequest);

        ///<summary>
        /// Asynchronously retrieves a diagram correction based on the provided diagram correction request.
        ///</summary>
        ///<param name="diagramCorrectionRequest">A model containing the diagram correction request.</param>
        ///<returns>A string representing the retrieved diagram correction.</returns>
        Task<string> GetDiagramCorrectionAsync(DiagramCorrectionRequest diagramCorrectionRequest);

        /// <summary>
        /// This method sends a request containing user stories to ChatGPT, which generates and returns a response with diagrams or graphical representations related to the input stories.
        /// </summary>
        /// <param name="diagramRequest">A string value containing the user stories and usecases to be used as input for the model.</param>
        /// <returns>A model representing the response generated by ChatGPT containing diagrams or graphical representations.</returns>
        Task<DiagramResponse> GetDiagramsAsync(DiagramRequest diagramRequest);

        /// <summary>
        /// Retrieves diagram validation information asynchronously based on the provided code.
        /// </summary>
        /// <param name="code">The code associated with the diagram.</param>
        /// <returns>A task representing the asynchronous operation. The diagram validation information as a string.</returns>
        Task<string> GetDiagramValidationAsync(string code);

        /// <summary>
        /// This method checks whether the request history is clear or not. It returns a boolean value indicating the clarity of the request history.
        /// </summary>
        /// <param name="history">A string containing the request history to be checked for clarity.</param>
        /// <returns>A boolean value (true or false) indicating whether the request history is clear or not.</returns>
        Task<bool> GetIsRequestClearAsync(string history);

        ///<summary>
        /// Asynchronously retrieves a notification based on the provided suggestions.
        ///</summary>
        ///<param name="suggestions">The suggestions used to identify and retrieve a notification.</param>
        ///<returns>A string representing the retrieved notification.</returns>
        Task<string> GetNotificationAsync(string suggestions);

        ///<summary>
        /// Asynchronously retrieves a notifications conversation based on the provided notification conversation request.
        ///</summary>
        ///<param name="notificationConversationRequest">A model containing the notification conversation request.</param>
        ///<returns>A string representing the retrieved notification conversation.</returns>
        Task<string> GetNotificationConversationAsync(NotificationConversationRequest notificationConversationRequest);

        ///<summary>
        /// Asynchronously retrieves potential notifications based on the provided description.
        ///</summary>
        ///<param name="description">The description used to identify potential notifications.</param>
        ///<returns>A string representing the retrieved potential notifications.</returns>
        Task<string> GetPotentialNotificationAsync(string description);

        /// <summary>
        /// This method sends a description as input to ChatGPT, which generates and returns a list of potential summary responses based on the provided description.
        /// </summary>
        /// <param name="description">A string containing the description for which potential summaries need to be generated.</param>
        /// <returns>A list of potential summary responses generated by ChatGPT.</returns>
        Task<List<PotentialSummaryResponse>> GetPotentialSummaryAsync(string description);

        /// <summary>
        /// This method sends a request history to ChatGPT, which generates and returns a list of summary responses based on the provided history.
        /// </summary>
        /// <param name="history">A string containing the request history for which summaries need to be generated.</param>
        /// <returns>A list of summary responses generated by ChatGPT.</returns>
        Task<List<SummaryResponse>> GetSummaryAsync(string history);

        ///<summary>
        /// Asynchronously retrieves a use case based on the provided description.
        ///</summary>
        ///<param name="description">The description used to search for a specific use case.</param>
        ///<returns>A string representing the retrieved use case.</returns>
        Task<string> GetUsecaseAsync(string description);

        ///<summary>
        /// Asynchronously retrieves a use case conversation based on the provided use case conversation request.
        ///</summary>
        ///<param name="usecaseConversationRequest">A model containing the use case conversation request.</param>
        ///<returns>A string representing the retrieved use case conversation.</returns>
        Task<string> GetUsecaseConversationAsync(UsecaseConversationRequest usecaseConversationRequest);

        /// <summary>
        /// Endpoint for retrieving AI response as streaming using SignalR.
        /// </summary>
        /// <param name="streamRequest">Request params</param>
        /// <returns>Returns response is success</returns>
        Task<string> StreamSignalRConversationAsync(StreamRequest streamRequest);
    }
}
