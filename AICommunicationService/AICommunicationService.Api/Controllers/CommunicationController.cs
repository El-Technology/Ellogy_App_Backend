using AICommunicationService.BLL.Interfaces;
using AICommunicationService.Common.Models.AIRequest;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace AICommunicationService.Api.Controllers
{
    /// <summary>
    /// This controller provides endpoints for communication with Chat GPT using various templates and methods.
    /// </summary>
    [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    [Route("api/[controller]")]
    [ApiController]
    public class CommunicationController : ControllerBase
    {
        private readonly ICommunicationService _communicationService;
        public CommunicationController(ICommunicationService communicationService)
        {
            _communicationService = communicationService;
        }

        /// <summary>
        /// HTTP POST endpoint that retrieves a description response from Chat GPT using user stories as input.
        /// </summary>
        /// <param name="userStories">A string value containing the user stories to be used as input for the Chat GPT model.</param>
        /// <returns>An IActionResult representing the HTTP response with the description response obtained from Chat GPT.</returns>
        [HttpPost]
        [Route("getDescription")]
        public async Task<IActionResult> GetDescription([FromBody] string userStories)
        {
            var description = await _communicationService.GetDescriptionAsync(userStories);
            return Ok(description);
        }

        /// <summary>
        /// HTTP POST endpoint that retrieves diagram responses from Chat GPT using user stories as input.
        /// </summary>
        /// <param name="userStories">A string value containing the user stories to be used as input for the Chat GPT model.</param>
        /// <returns>An IActionResult representing the HTTP response with the diagram response obtained from Chat GPT.</returns>
        [HttpPost]
        [Route("getDiagram")]
        public async Task<IActionResult> GetDiagram([FromBody] string userStories)
        {
            var diagram = await _communicationService.GetDiagramsAsync(userStories);
            return Ok(diagram);
        }

        /// <summary>
        /// HTTP POST endpoint that checks whether the request history is clear or not.
        /// </summary>
        /// <param name="history">A string containing the request history to be checked for clarity.</param>
        /// <returns>An IActionResult representing the HTTP response containing a boolean value (true or false) indicating whether the request history is clear.</returns>
        [HttpPost]
        [Route("getIsRequestClear")]
        public async Task<IActionResult> GetIsRequestClear([FromBody] string history)
        {
            var isRequest = await _communicationService.GetIsRequestClearAsync(history);
            return Ok(isRequest);
        }

        /// <summary>
        /// HTTP POST endpoint that retrieves a list of potential summary responses from Chat GPT based on the provided description.
        /// </summary>
        /// <param name="description">A string containing the description for which potential summaries need to be generated.</param>
        /// <returns>An IActionResult representing the HTTP response containing a list of potential summary responses generated by Chat GPT.</returns>
        [HttpPost]
        [Route("getPotentialSummary")]
        public async Task<IActionResult> GetPotentialSummary([FromBody] string description)
        {
            var potentialSummary = await _communicationService.GetPotentialSummaryAsync(description);
            return Ok(potentialSummary);
        }

        /// <summary>
        /// HTTP POST endpoint that retrieves a list of summary responses from Chat GPT based on the provided history.
        /// </summary>
        /// <param name="history">A string containing the request history for which summaries need to be generated.</param>
        /// <returns>An IActionResult representing the HTTP response containing a list of summary responses generated by Chat GPT.</returns>
        [HttpPost]
        [Route("getSummary")]
        public async Task<IActionResult> GetSummary([FromBody] string history)
        {
            var potentialSummary = await _communicationService.GetSummaryAsync(history);
            return Ok(potentialSummary);
        }

        /// <summary>
        /// HTTP POST endpoint that sends a conversation request to Chat GPT, containing a series of messages between a user and the model. It retrieves the model's response as a string representing the reply to the conversation.
        /// </summary>
        /// <param name="conversationRequest">A model containing the conversation request, which includes a series of messages between the user and the model.</param>
        /// <returns>An IActionResult representing the HTTP response containing the model's response to the conversation as a string.</returns>
        [HttpPost]
        [Route("getConversation")]
        public async Task<IActionResult> GetConversation([FromBody] ConversationRequest conversationRequest)
        {
            var potentialSummary = await _communicationService.GetConversationAsync(conversationRequest);
            return Ok(potentialSummary);
        }

        /// <summary>
        /// HTTP POST endpoint that sends a conversation summary request to Chat GPT, containing a series of messages between a user and the model. It retrieves the model's summary response based on the conversation.
        /// </summary>
        /// <param name="conversationSummaryRequest">A model containing the conversation summary request, which includes a series of messages between the user and the model.</param>
        /// <returns>An IActionResult representing the HTTP response containing the model's summary response based on the conversation.</returns>
        [HttpPost]
        [Route("getConversationSummary")]
        public async Task<IActionResult> GetConversationSummary([FromBody] ConversationSummaryRequest conversationSummaryRequest)
        {
            var potentialSummary = await _communicationService.GetConversationSummaryAsync(conversationSummaryRequest);
            return Ok(potentialSummary);
        }
    }
}
