using AICommunicationService.BLL.Interfaces;
using AICommunicationService.Common.Models.AIRequest;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using OpenAI_API.Models;

namespace AICommunicationService.Api.Controllers
{
    /// <summary>
    /// This controller provides endpoints for communication with Chat GPT using various templates and methods.
    /// </summary>
    [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    [Route("api/[controller]")]
    [ApiController]
    public class CommunicationController : ControllerBase
    {
        private readonly ICommunicationService _communicationService;
        public CommunicationController(ICommunicationService communicationService)
        {
            _communicationService = communicationService;
        }

        /// <summary>
        /// HTTP POST endpoint that retrieves a description response from Chat GPT using user stories as input.
        /// </summary>
        /// <param name="userStories">A string value containing the user stories to be used as input for the Chat GPT model.</param>
        /// <returns>An IActionResult representing the HTTP response with the description response obtained from Chat GPT.</returns>
        [HttpPost]
        [Route("getDescription")]
        public async Task<IActionResult> GetDescription([FromBody] string userStories)
        {
            var response = await _communicationService.GetDescriptionAsync(userStories);
            return Ok(response);
        }

        /// <summary>
        /// HTTP POST endpoint that retrieves diagram responses from Chat GPT using user stories as input.
        /// </summary>
        /// <param name="userStories">A string value containing the user stories to be used as input for the Chat GPT model.</param>
        /// <returns>An IActionResult representing the HTTP response with the diagram response obtained from Chat GPT.</returns>
        [HttpPost]
        [Route("getDiagram")]
        public async Task<IActionResult> GetDiagram([FromBody] DiagramRequest diagramRequest)
        {
            var response = await _communicationService.GetDiagramsAsync(diagramRequest);
            return Ok(response);
        }

        /// <summary>
        /// HTTP POST endpoint that checks whether the request history is clear or not.
        /// </summary>
        /// <param name="history">A string containing the request history to be checked for clarity.</param>
        /// <returns>An IActionResult representing the HTTP response containing a boolean value (true or false) indicating whether the request history is clear.</returns>
        [HttpPost]
        [Route("getIsRequestClear")]
        public async Task<IActionResult> GetIsRequestClear([FromBody] string history)
        {
            var response = await _communicationService.GetIsRequestClearAsync(history);
            return Ok(response);
        }

        /// <summary>
        /// HTTP POST endpoint that retrieves a list of potential summary responses from Chat GPT based on the provided description.
        /// </summary>
        /// <param name="description">A string containing the description for which potential summaries need to be generated.</param>
        /// <returns>An IActionResult representing the HTTP response containing a list of potential summary responses generated by Chat GPT.</returns>
        [HttpPost]
        [Route("getPotentialSummary")]
        public async Task<IActionResult> GetPotentialSummary([FromBody] string description)
        {
            var response = await _communicationService.GetPotentialSummaryAsync(description);
            return Ok(response);
        }

        /// <summary>
        /// HTTP POST endpoint that retrieves a list of summary responses from Chat GPT based on the provided history.
        /// </summary>
        /// <param name="history">A string containing the request history for which summaries need to be generated.</param>
        /// <returns>An IActionResult representing the HTTP response containing a list of summary responses generated by Chat GPT.</returns>
        [HttpPost]
        [Route("getSummary")]
        public async Task<IActionResult> GetSummary([FromBody] string history)
        {
            var response = await _communicationService.GetSummaryAsync(history);
            return Ok(response);
        }

        /// <summary>
        /// HTTP POST endpoint that sends a conversation request to Chat GPT, containing a series of messages between a user and the model. It retrieves the model's response as a string representing the reply to the conversation.
        /// </summary>
        /// <param name="conversationRequest">A model containing the conversation request, which includes a series of messages between the user and the model.</param>
        /// <returns>An IActionResult representing the HTTP response containing the model's response to the conversation as a string.</returns>
        [HttpPost]
        [Route("getConversation")]
        public async Task<IActionResult> GetConversation([FromBody] ConversationRequest conversationRequest)
        {
            var response = await _communicationService.GetConversationAsync(conversationRequest);
            return Ok(response);
        }

        /// <summary>
        /// HTTP POST endpoint that sends a conversation summary request to Chat GPT, containing a series of messages between a user and the model. It retrieves the model's summary response based on the conversation.
        /// </summary>
        /// <param name="conversationSummaryRequest">A model containing the conversation summary request, which includes a series of messages between the user and the model.</param>
        /// <returns>An IActionResult representing the HTTP response containing the model's summary response based on the conversation.</returns>
        [HttpPost]
        [Route("getConversationSummary")]
        public async Task<IActionResult> GetConversationSummary([FromBody] ConversationSummaryRequest conversationSummaryRequest)
        {
            var response = await _communicationService.GetConversationSummaryAsync(conversationSummaryRequest);
            return Ok(response);
        }

        ///<summary>
        /// HTTP POST endpoint that retrieves a use case based on the provided description.
        ///</summary>
        ///<param name="description">The description used to search for a specific use case.</param>
        ///<returns>An IActionResult representing the HTTP response containing the retrieved use case.</returns>
        [HttpPost]
        [Route("getUsecase")]
        public async Task<IActionResult> GetUsecase([FromBody] string description)
        {
            var response = await _communicationService.GetUsecaseAsync(description);
            return Ok(response);
        }

        ///<summary>
        /// HTTP POST endpoint that retrieves a use case conversation based on the provided use case conversation request.
        ///</summary>
        ///<param name="usecaseConversationRequest">A model containing the use case conversation request.</param>
        ///<returns>An IActionResult representing the HTTP response containing the retrieved use case conversation.</returns>
        [HttpPost]
        [Route("getUsecaseConversation")]
        public async Task<IActionResult> GetUsecaseConversation([FromBody] UsecaseConversationRequest usecaseConversationRequest)
        {
            var response = await _communicationService.GetUsecaseConversationAsync(usecaseConversationRequest);
            return Ok(response);
        }

        ///<summary>
        /// HTTP POST endpoint that retrieves potential notifications based on the provided description.
        ///</summary>
        ///<param name="description">The description used to identify potential notifications.</param>
        ///<returns>An IActionResult representing the HTTP response containing the retrieved potential notifications.</returns>
        [HttpPost]
        [Route("getPotentialNotification")]
        public async Task<IActionResult> GetPotentialNotification([FromBody] string description)
        {
            var response = await _communicationService.GetPotentialNotificationAsync(description);
            return Ok(response);
        }

        ///<summary>
        /// HTTP POST endpoint that retrieves a notifications conversation based on the provided notification conversation request.
        ///</summary>
        ///<param name="notificationConversation">A model containing the notification conversation request.</param>
        ///<returns>An IActionResult representing the HTTP response containing the retrieved notification conversation.</returns>
        [HttpPost]
        [Route("getNotificationsConversation")]
        public async Task<IActionResult> GetNotificationsConversation([FromBody] NotificationConversationRequest notificationConversation)
        {
            var response = await _communicationService.GetNotificationConversationAsync(notificationConversation);
            return Ok(response);
        }

        ///<summary>
        /// HTTP POST endpoint that retrieves a notification based on the provided suggestions.
        ///</summary>
        ///<param name="suggestions">The suggestions used to identify and retrieve a notification.</param>
        ///<returns>An IActionResult representing the HTTP response containing the retrieved notification.</returns>
        [HttpPost]
        [Route("getNotification")]
        public async Task<IActionResult> GetNotification([FromBody] string suggestions)
        {
            var response = await _communicationService.GetNotificationAsync(suggestions);
            return Ok(response);
        }

        ///<summary>
        /// HTTP POST endpoint that retrieves a diagram correction based on the provided diagram correction request.
        ///</summary>
        ///<param name="diagramCorrection">A model containing the diagram correction request.</param>
        ///<returns>An IActionResult representing the HTTP response containing the retrieved diagram correction.</returns>
        [HttpPost]
        [Route("getDiagramCorrection")]
        public async Task<IActionResult> GetDiagramCorrection([FromBody] DiagramCorrectionRequest diagramCorrection)
        {
            var response = await _communicationService.GetDiagramCorrectionAsync(diagramCorrection);
            return Ok(response);
        }

        ///<summary>
        /// HTTP POST endpoint that retrieves a description table based on the provided description table request.
        ///</summary>
        ///<param name="descriptionTable">A model containing the description table request.</param>
        ///<returns>An IActionResult representing the HTTP response containing the retrieved description table.</returns>
        [HttpPost]
        [Route("getDescriptionTable")]
        public async Task<IActionResult> GetDescriptionTable([FromBody] DescriptionTableRequest descriptionTable)
        {
            var response = await _communicationService.GetDescriptionTableAsync(descriptionTable);
            return Ok(response);
        }

        /// <summary>
        /// Endpoint for retrieving diagram validation information asynchronously based on the provided code.
        /// </summary>
        /// <param name="code">The code associated with the diagram.</param>
        /// <returns>Returns the diagram validation information in the response.</returns>
        [HttpPost]
        [Route("getDiagramValidation")]
        public async Task<IActionResult> GetDiagramValidation([FromBody] string code)
        {
            var response = await _communicationService.GetDiagramValidationAsync(code);
            return Ok(response);
        }

        /// <summary>
        /// Endpoint for retrieving banners asynchronously based on the provided description.
        /// </summary>
        /// <param name="description">The description associated with the banners.</param>
        /// <returns>Returns the banners information in the response.</returns>
        [HttpPost]
        [Route("getBanners")]
        public async Task<IActionResult> GetBanners([FromBody] string description)
        {
            var response = await _communicationService.GetBannersAsync(description);
            return Ok(response);
        }

        [HttpPost]
        [Route("getStreamRequest")]
        public async Task GetStreamRequest([FromBody] StreamRequest streamRequest)
        {
            var conversation = _communicationService.ReturnChatEndpoint(streamRequest);

            await conversation.StreamResponseFromChatbotAsync(async res =>
            {
                await Response.WriteAsync(res);
            });
        }
    }
}