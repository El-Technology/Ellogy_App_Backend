version: "3.9"
services:
  api_gateway:
    build:
      context: ./OcelotApiGateway
      dockerfile: OcelotApiGateway/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT:
      OCELOT_CONF:
    ports:
      - "7060:443"
      - "5211:80"
    depends_on:
      - postgresql_database
    networks:
      - postgres
  user_manager:
    build:
      context: ./UserManager
      dockerfile: UserManager.Api/Dockerfile
    environment:
      CONNECTION_STRING:
      JWT_SECRET_KEY:
      COMMUNICATION_SERVICE_CONNECTION_STRING:
      ASPNETCORE_ENVIRONMENT:
    ports:
      - "7077:443"
      - "5281:80"
    depends_on:
      - api_gateway
    networks:
      - postgres
  ticket_manager:
    build:
      context: ./TicketsManager
      dockerfile: TicketsManager.Api/Dockerfile
    environment:
      CONNECTION_STRING:
      ASPNETCORE_ENVIRONMENT:
      JWT_SECRET_KEY:
    ports:
      - "7188:443"
      - "5041:80"
    depends_on:
      - api_gateway
    networks:
      - postgres
  postgresql_database:
    image: postgres:15.2 
    environment:
      POSTGRES_DB:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d ellogy"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - postgres

networks:
  postgres:
    driver: bridge
volumes:
  postgres-data:
